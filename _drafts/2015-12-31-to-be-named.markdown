D2

不四：node.js构建海量页面渲染
著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：杨帆
链接：https://www.zhihu.com/question/38637676/answer/77607930
来源：知乎

1. 不四老师的 「用 Node.js 构建海量页面渲染服务」其实我觉得这个案例不是很好，不能很好地说明 nodejs 的优势，那两张曲线图容易迷惑不明真相的群众。那不是 nodejs 和 php 的对比图，更像是新架构和老架构的对比图，20k 的 CDN 服务器啊，把主动的推模型改成被动获取的模型很明显会把系统吞吐提高一个等级。不四老师应该也意识到这个问题了，所以在 QA 环节说，也许老系统用 php 重构，结果也许不会比 nodejs 的曲线差到哪里去。如果一个 php 系统非要用 nodejs 重构，那一般有 nodejs 非常擅长而 php 不擅长的事情，比如 WebSocket 协议支持，长连接，异步 io （网络/文件），而如果这些都没用到，那唯一的理由可能就只是 js 语（qing）法（huai）问题了。本来我想交流几个关于 koa 的问题的，无奈这一场人太多，找不到机会。不四老师说 koa 能轻易修改 body 和 header 是一种优势，但我们遇到的问题是，middleware 太容易修改 body 会引起一些诡异的问题而无法排查，你必须确保第三方的 middleware 是绝对「可控」的，还有 koa 2.0 beta 的问题，不过这不是重点，略过不提了。


省内存的方式
a. 使用雪碧图
b. 图片尺寸严格控制，够用就行，几个像素就可以导致内存差别几百kb

省请求
iconFont通用
合并小的UI图片
禁止资源重定向（2s左右的perf影响）

朴灵老师
著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：杨帆
链接：https://www.zhihu.com/question/38637676/answer/77607930
来源：知乎

3. 朴灵老师的「alinode与Node应用性能管理」这是我挺期待的话题，也是我一直很想做的事情，nodejs 的调试和定位，一直都是 nodejs 作为服务器端最大的痛点，没有之一。举个例子：写一套复杂 nodejs 程序可能会遇到的问题是，某些内存泄露会来得令人措手不及，而我们唯一能做的是利用类似 bnoordhuis/node-heapdump · GitHub 这样的东西，把 heap dump 出来然后对着密密麻麻的文字找到可疑的变量查问题。alinode 做的（我猜的）：跑一个 agentx 的常驻程序，发回 nodejs 的内存，CPU之类的日常使用情况，把 nodejs 改成 alinode，让其具备 heapdump （增加了 node-kill ）的能力，搞了 node-profiler 来搞 cpu profiling ，并与服务器端连动。比如内存泄露了，服务器会向 alinode 请求日志，拿到 headpdump 的文件，然后 alinode 的云平台跑着一个日志分析程序，自动定位到可疑的问题。agentx 算是开源的，alinode 和 node-profiler 只有二进制文件，最最重要的这套日志分析程序跑在服务器端，是个黑盒。所以 QA 环节我站起来问朴灵老师是否有开源这套日志分析系统的计划，朴灵老师含蓄地表示如果我们线上开发出一套更先进的系统，这套老的会开源的 2333


融合web技术的NativeUI架构



美杜莎
略过